Imports MySql.Data.MySqlClient
Imports System.IO
Public Class Form_Main ' Created by: Joshua C. Magoliman
    Public usernameGetter As String = ""
    Public passwordGetter As String = ""
    Public userIdGetter As Integer = 0
    Public productNameGetter As String = ""
    Public inventoryIdGetter As Integer = 0
    Public productCategoryIdGetter As Integer = 0
    Public supplierIdGetter As Integer = 0
    Private Sub Form_Main_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        GeneralReset()
    End Sub
    Public Sub GeneralReset()
        lblTimeNow.Text = TimeOfDay.ToString("h:mm:ss tt")
        lblDateAndDayToday.Text = Date.Now.ToString("MMMM dd, yyyy") & " / " & WeekdayName(Weekday(Now))
        Timer1.Start()
        Module_Reset.Inventory_In_CA()
        Module_Reset.Inventory_In_M()
        Module_Reset.Inventory_In_H()
        Module_Reset.Inventory_Out()
        Module_Reset.Products_ManageProducts()
        Module_Reset.Products_ProductCategories()
        Module_Reset.Suppliers()
        Module_Reset.Accounts_CreateANewAccount()
        Module_Reset.Accounts_ChangePassword()
        Module_Reset.Sales()
        lblAccountName.Text = "ACCOUNT NAME: " & Form_Login.adminFullName
        tc_Main.SelectedIndex = 0
        tcInventory.SelectedTab = tpIn
        tcProducts.SelectedTab = tpManageProducts
        tcAccounts.SelectedTab = tpAccountDetails
    End Sub
    Private Sub tcMain_Click(sender As Object, e As EventArgs) Handles tc_Main.Click
        tcInventory.SelectedTab = tpIn
        tc_In_Content.SelectedTab = tp_CA
        tcProducts.SelectedTab = tpManageProducts
        tcAccounts.SelectedTab = tpAccountDetails
        txt_SuppliersSupplierName.Focus()
        Module_Reset.Inventory_In_CA()
        Module_Reset.Inventory_In_M()
        Module_Reset.Inventory_In_H()
        Module_Reset.Products_ManageProducts()
        Module_Reset.Products_ProductCategories()
        Module_Reset.Suppliers()
        Module_Reset.Accounts_CreateANewAccount()
        Module_Reset.Accounts_ChangePassword()
        Module_Reset.Sales()
    End Sub
    Private Sub AutoGenerated_Id()
        Try
            con.Open()
            Dim value As String
            Dim id As Integer
            cmd = New MySqlCommand("SELECT MAX(Id) FROM tbl_products", con)
            cmd.CommandType = CommandType.Text
            value = cmd.ExecuteScalar().ToString()
            If String.IsNullOrEmpty(value) Then
                value = "00000"
            End If
            value = value.Substring(0)
            Int32.TryParse(value, id)
            id = id + 1
            value = id.ToString("d5")
            txt_ManageProductsProductID.Text = value
            cmd.Dispose()
            con.Close()
        Catch ex As Exception
            MessageBox.Show(ex.Message & vbCrLf & ex.StackTrace)
        End Try
    End Sub
    Private Sub lblLogOut_Click(sender As Object, e As EventArgs) Handles lblLogOut.Click
        lblLogOut.Text = MessageBox.Show("Are you sure you want to logout?", "ATTENTION", MessageBoxButtons.YesNo, MessageBoxIcon.Information)
        If lblLogOut.Text = DialogResult.Yes Then
            Me.Hide()
            Reset()
            Form_Login.Show()
            Form_Login.Reset()
            Form_Login.BringToFront()
        End If
        lblLogOut.Text = "Logout"
    End Sub
    Private Sub dgv_In_M_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv_In_M.CellClick
        Module_Retrieve.Inventory_In_M()
    End Sub
    Private Sub dgv_ManageProducts_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv_ManageProducts.CellClick
        Module_Retrieve.ManageProducts()
    End Sub
    Private Sub dgv_ProductCategories_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv_ProductCategories.CellClick
        Module_Retrieve.ProductCategories()
    End Sub
    Private Sub dgv_Suppliers_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv_Suppliers.CellClick
        Module_Retrieve.Suppliers()
    End Sub
    Private Sub btn_ManageProductsAdd_Click(sender As Object, e As EventArgs) Handles btn_ManageProductsAdd.Click
        Module_Add.ManageProducts()
    End Sub
    Private Sub btn_ManageProductsEdit_Click(sender As Object, e As EventArgs) Handles btn_ManageProductsEdit.Click
        Module_Edit.ManageProducts()
    End Sub
    Private Sub btn_ManageProductsClear_Click(sender As Object, e As EventArgs) Handles btn_ManageProductsClear.Click
        Module_Clear.ManageProducts()
    End Sub
    Private Sub btn_ManageProductsUpdate_Click(sender As Object, e As EventArgs) Handles btn_ManageProductsUpdate.Click
        Module_Update.ManageProducts()
    End Sub
    Private Sub btn_ManageProductsDelete_Click(sender As Object, e As EventArgs) Handles btn_ManageProductsDelete.Click
        Module_Delete.ManageProducts()
    End Sub
    Private Sub btn_ProductCategoriesAdd_Click(sender As Object, e As EventArgs) Handles btn_ProductCategoriesAdd.Click
        Module_Add.ProductCategories()
    End Sub
    Private Sub btn_ProductCategorieEdit_Click(sender As Object, e As EventArgs) Handles btn_ProductCategoriesEdit.Click
        Module_Edit.ProductCategories()
    End Sub
    Private Sub btn_ProductCategorieClear_Click(sender As Object, e As EventArgs) Handles btn_ProductCategoriesClear.Click
        Module_Clear.ProductCategories()
    End Sub
    Private Sub btn_ProductCategoriesUpdate_Click(sender As Object, e As EventArgs) Handles btn_ProductCategoriesUpdate.Click
        Module_Update.ProductCategories()
    End Sub
    Private Sub btn_ProductCategoriesDelete_Click(sender As Object, e As EventArgs) Handles btn_ProductCategoriesDelete.Click
        Module_Delete.ProductCategories()
    End Sub
    Private Sub btn_SuppliersAdd_Click(sender As Object, e As EventArgs) Handles btn_SuppliersAdd.Click
        Module_Add.Supplier()
    End Sub
    Private Sub btn_SuppliersEdit_Click(sender As Object, e As EventArgs) Handles btn_SuppliersEdit.Click
        Module_Edit.Supplier()
    End Sub
    Private Sub btn_SuppliersClear_Click(sender As Object, e As EventArgs) Handles btn_SuppliersClear.Click
        Module_Clear.Supplier()
    End Sub
    Private Sub btn_SuppliersUpdate_Click(sender As Object, e As EventArgs) Handles btn_SuppliersUpdate.Click
        Module_Update.Supplier()
    End Sub
    Private Sub btn_SuppliersDelete_Click(sender As Object, e As EventArgs) Handles btn_SuppliersDelete.Click
        Module_Delete.Supplier()
    End Sub
    Private Sub btn_CreateANewAccountCreate_Click(sender As Object, e As EventArgs) Handles btn_CreateANewAccountCreate.Click
        Module_Add.CreaterAnotherAccount()
    End Sub
    Private Sub btn_CreateANewAccountCancel_Click(sender As Object, e As EventArgs) Handles btn_CreateANewAccountCancel.Click
        Dim question As String
        question = MsgBox("Are you sure you want to cancel?", MsgBoxStyle.Exclamation + MsgBoxStyle.YesNo, "ATTENTION !")
        If question = vbYes Then
            Module_Reset.Accounts_CreateANewAccount()
        End If
    End Sub
    Private Sub btn_ChangePasswordChangePassword_Click(sender As Object, e As EventArgs) Handles btn_ChangePasswordChangePassword.Click
        If txt_ChangePasswordCurrentPassword.Text = "" And txt_ChangePasswordNewPassword.Text = "" And txt_ChangePasswordConfirmNewPassword.Text = "" Then
            MsgBox("Fill up your Password details", MsgBoxStyle.Critical, "ATTENTION!")
            txt_ChangePasswordCurrentPassword.Focus()
        ElseIf txt_ChangePasswordCurrentPassword.Text = "" Then
            MsgBox("No Current Password Found!", MsgBoxStyle.Critical, "Error")
            txt_ChangePasswordCurrentPassword.Focus()
        ElseIf txt_ChangePasswordNewPassword.Text = "" Then
            MsgBox("No New Password Found!", MsgBoxStyle.Critical, "Error")
            txt_ChangePasswordNewPassword.Focus()
        ElseIf txt_ChangePasswordConfirmNewPassword.Text = "" Then
            MsgBox("No Confirm New Password Found!", MsgBoxStyle.Critical, "Error")
            txt_ChangePasswordConfirmNewPassword.Focus()
        Else
            Try
                con.Open()
                cmd = New MySqlCommand("SELECT * FROM tbl_Users WHERE Username = @Username", con)
                cmd.CommandType = CommandType.Text
                cmd.Parameters.Add(New MySqlParameter("@Username", usernameGetter))
                dr = cmd.ExecuteReader()
                If dr.Read = True Then
                    If (BCrypt.Net.BCrypt.Verify(txt_ChangePasswordCurrentPassword.Text, dr.Item("Password"))) Then
                        dr.Close()
                        con.Close()
                        Comparing()
                    Else
                        dr.Close()
                        con.Close()
                        MsgBox("Current Password is incorrect!", MsgBoxStyle.Critical, "Error")
                        lblTitle.Focus()
                    End If
                End If
            Catch ex As Exception
                MessageBox.Show(ex.Message & vbCrLf & ex.StackTrace)
            Finally
                con.Close()
            End Try
        End If
    End Sub
    Private Sub Comparing()
        If Not txt_ChangePasswordNewPassword.Text = txt_ChangePasswordConfirmNewPassword.Text Then
            MsgBox("Your New Password and Confirm New Password are not the same!", MsgBoxStyle.Critical, "Error")
        ElseIf Not txt_ChangePasswordConfirmNewPassword.Text = txt_ChangePasswordNewPassword.Text Then
            MsgBox("Your New Password and Confirm New Password are not the same!", MsgBoxStyle.Critical, "Error")
        Else
            Try
                con.Open()
                cmd = New MySqlCommand("SELECT * FROM tbl_Users WHERE Username = @Username", con)
                cmd.CommandType = CommandType.Text
                cmd.Parameters.Add(New MySqlParameter("@Username", usernameGetter))
                dr = cmd.ExecuteReader()
                If dr.Read = True Then
                    If (BCrypt.Net.BCrypt.Verify(txt_ChangePasswordConfirmNewPassword.Text, dr.Item("Password"))) Then
                        MsgBox("Your New Password and Confirm New Password is currently used. Please try another password!", MsgBoxStyle.Critical, "ATTENTION")
                    Else
                        dr.Close()
                        con.Close()
                        Updating()
                    End If
                End If
                dr.Close()
                con.Close()
            Catch ex As Exception
                MessageBox.Show(ex.Message & vbCrLf & ex.StackTrace)
            Finally
                con.Close()
            End Try
        End If
    End Sub
    Private Sub Updating()
        Try
            con.Open()
            cmd = New MySqlCommand("UPDATE tbl_Users set Password = @Password WHERE Username = @Username", con)
            cmd.CommandType = CommandType.Text
            cmd.Parameters.Add(New MySqlParameter("@Password", BCrypt.Net.BCrypt.HashPassword(txt_ChangePasswordNewPassword.Text)))
            cmd.Parameters.Add(New MySqlParameter("@Username", usernameGetter))
            cmd.ExecuteNonQuery()
            cmd.Dispose()
            passwordGetter = txt_ChangePasswordNewPassword.Text
            con.Close()
            MsgBox("SUCCESSFULLY CHANGED!", MsgBoxStyle.Information, "ATTENTION")
            Module_Reset.Accounts_ChangePassword()
        Catch ex As Exception
            MessageBox.Show(ex.Message & vbCrLf & ex.StackTrace)
        Finally
            con.Close()
        End Try
    End Sub
    Private Sub btn_ChangePasswordCancel_Click(sender As Object, e As EventArgs) Handles btn_ChangePasswordCancel.Click
        Dim question As String
        question = MsgBox("Are you sure you want to cancel?", MsgBoxStyle.Exclamation + MsgBoxStyle.YesNo, "ATTENTION !")
        If question = vbYes Then
            Module_Reset.Accounts_ChangePassword()
        End If
    End Sub
    Private Sub btn_OutRefresh_Click(sender As Object, e As EventArgs) Handles btn_Out_Refresh.Click
        Module_Reset.Inventory_Out()
    End Sub
    Private Sub btn_ManageInventoryRefresh_Click(sender As Object, e As EventArgs)
        Module_Reset.Inventory_In_M()
    End Sub
    Private Sub btn_ManageProductsRefresh_Click(sender As Object, e As EventArgs) Handles btn_ManageProductsRefresh.Click
        Module_Reset.Products_ManageProducts()
    End Sub
    Private Sub btn_ProductCategoriesRefresh_Click(sender As Object, e As EventArgs) Handles btn_ProductCategoriesRefresh.Click
        Module_Reset.Products_ProductCategories()
    End Sub
    Private Sub btn_SuppliersRefresh_Click(sender As Object, e As EventArgs) Handles btn_SuppliersRefresh.Click
        Module_Reset.Suppliers()
    End Sub
    Private Sub btn_AccountDetailsRefresh_Click(sender As Object, e As EventArgs) Handles btn_AccountDetailsRefresh.Click
        Module_Reset.Accounts_CreateANewAccount()
        Module_Reset.Accounts_ChangePassword()
    End Sub
    Private Sub btn_SalesRefresh_Click(sender As Object, e As EventArgs) Handles btn_SalesRefresh.Click
        Module_Reset.Sales()
    End Sub
    Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
        lblTimeNow.Text = TimeOfDay.ToString("h:mm:ss tt")
        lblDateAndDayToday.Text = Date.Now.ToString("MMMM dd, yyyy") & " / " & WeekdayName(Weekday(Now))
    End Sub
    Private Sub txt_ManageProductsProductID_Click(sender As Object, e As EventArgs) Handles txt_ManageProductsProductID.Click
        btn_ManageProductsAdd.Enabled = True
        btn_ManageProductsClear.Enabled = True
        AutoGenerated_Id()
        txt_ManageProductsProductID.Enabled = False
        txt_ManageProductsName.Enabled = True
        txt_ManageProductsPrice.Enabled = True
        cmbbox_ManageProductsProductCategory.Enabled = True
        cmbbox_ManageProductsSupplier.Enabled = True
        txt_ManageProductsName.Focus()
    End Sub
    Private Sub chkbox_CreateANewAccountShowPassword_CheckedChanged(sender As Object, e As EventArgs) Handles chkbox_CreateANewAccountShowPassword.CheckedChanged
        If chkbox_CreateANewAccountShowPassword.Checked = False Then
            txt_CreateANewAccountPassword.PasswordChar = "*"
        Else
            txt_CreateANewAccountPassword.PasswordChar = ""
        End If
        lblTitle.Focus()
    End Sub
    Private Sub chkbox_CreateANewAccountShowSecretAnswer_CheckedChanged(sender As Object, e As EventArgs) Handles chkbox_CreateANewAccountShowSecretAnswer.CheckedChanged
        If chkbox_CreateANewAccountShowSecretAnswer.Checked = False Then
            txt_CreateANewAccountSecretAnswer.PasswordChar = "*"
        Else
            txt_CreateANewAccountSecretAnswer.PasswordChar = ""
        End If
        lblTitle.Focus()
    End Sub
    Private Sub chkbox_ChangePasswordShowPassword1_CheckedChanged(sender As Object, e As EventArgs) Handles chkbox_ChangePasswordShowPassword1.CheckedChanged
        If chkbox_ChangePasswordShowPassword1.Checked = False Then
            txt_ChangePasswordCurrentPassword.PasswordChar = "*"
        Else
            txt_ChangePasswordCurrentPassword.PasswordChar = ""
        End If
        lblTitle.Focus()
    End Sub
    Private Sub chkbox_ChangePasswordShowPassword2_CheckedChanged(sender As Object, e As EventArgs) Handles chkbox_ChangePasswordShowPassword2.CheckedChanged
        If chkbox_ChangePasswordShowPassword2.Checked = False Then
            txt_ChangePasswordNewPassword.PasswordChar = "*"
            txt_ChangePasswordConfirmNewPassword.PasswordChar = "*"
        Else
            txt_ChangePasswordNewPassword.PasswordChar = ""
            txt_ChangePasswordConfirmNewPassword.PasswordChar = ""
        End If
        lblTitle.Focus()
    End Sub
    Private Sub tcInventory_Click(sender As Object, e As EventArgs) Handles tcInventory.Click
        Module_Reset.Inventory_In_CA()
        Module_Reset.Inventory_In_M()
        Module_Reset.Inventory_In_H()
        Module_Reset.Inventory_Out()
        tc_In_Content.SelectedTab = tp_CA
    End Sub
    Private Sub tcProducts_Click(sender As Object, e As EventArgs) Handles tcProducts.Click
        Module_Reset.Products_ManageProducts()
        Module_Reset.Products_ProductCategories()
    End Sub
    Private Sub tcAccounts_Click(sender As Object, e As EventArgs) Handles tcAccounts.Click
        Module_Reset.Accounts_CreateANewAccount()
        Module_Reset.Accounts_ChangePassword()
    End Sub
    Private Sub txt_ManageProductsName_TextChanged(sender As Object, e As EventArgs)
        If Not txt_ManageProductsName.Text = "" Then
            btn_ManageProductsAdd.Enabled = True
        Else
            btn_ManageProductsAdd.Enabled = False
        End If
    End Sub
    Private Sub txt_SuppliersSupplierName_TextChanged(sender As Object, e As EventArgs) Handles txt_SuppliersSupplierName.TextChanged
        If Not txt_SuppliersSupplierName.Text = "" Then
            btn_SuppliersAdd.Enabled = True
            btn_SuppliersClear.Enabled = True
            cmbbox_SuppliersTypes.Enabled = True
            txt_SuppliersEmail.Enabled = True
            txt_SuppliersContactNumber.Enabled = True
            txt_SuppliersAddress.Enabled = True
        Else
            btn_SuppliersAdd.Enabled = False
            btn_SuppliersClear.Enabled = False
            cmbbox_SuppliersTypes.Enabled = False
            txt_SuppliersEmail.Enabled = False
            txt_SuppliersContactNumber.Enabled = False
            txt_SuppliersAddress.Enabled = False
        End If
    End Sub
    Private Sub txt_SuppliersSearch_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_SuppliersSearch.KeyPress
        If Char.IsLetterOrDigit(e.KeyChar) Or Char.IsControl(e.KeyChar) Or Char.IsWhiteSpace(e.KeyChar) Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        If cmbbox_SuppliersFilter.Text = "ID" Then
            txt_SuppliersSearch.MaxLength = 2
        ElseIf cmbbox_SuppliersFilter.Text = "NAME" Then
            txt_SuppliersSearch.MaxLength = 45
        ElseIf cmbbox_SuppliersFilter.Text = "TYPES" Then
            txt_SuppliersSearch.MaxLength = 13
        ElseIf cmbbox_SuppliersFilter.Text = "EMAIL" Then
            txt_SuppliersSearch.MaxLength = 50
        ElseIf cmbbox_SuppliersFilter.Text = "CONTACT NUMBER" Then
            txt_SuppliersSearch.MaxLength = 45
        ElseIf cmbbox_SuppliersFilter.Text = "ADDRESS" Then
            txt_SuppliersSearch.MaxLength = 60
        ElseIf cmbbox_SuppliersFilter.Text = "ACCOUNT NAME" Then
            txt_SuppliersSearch.MaxLength = 50
        ElseIf cmbbox_SuppliersFilter.Text = "NONE" Then
            txt_SuppliersSearch.MaxLength = 16
        End If
    End Sub
    Private Sub txt_SuppliersSearch_TextChanged(sender As Object, e As EventArgs) Handles txt_SuppliersSearch.TextChanged
        Module_Search.Suppliers()
    End Sub
    Private Sub cmbbox_SuppliersFilter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_SuppliersFilter.TextChanged
        txt_SuppliersSearch.Focus()
    End Sub
    Private Sub txt_ProductCategoriesCategoryName_TextChanged(sender As Object, e As EventArgs) Handles txt_ProductCategoriesCategoryName.TextChanged
        If Not txt_ProductCategoriesCategoryName.Text = "" Then
            btn_ProductCategoriesAdd.Enabled = True
            btn_ProductCategoriesClear.Enabled = True
        Else
            btn_ProductCategoriesAdd.Enabled = False
            btn_ProductCategoriesClear.Enabled = False
        End If
    End Sub
    Private Sub txt_ProductCategoriesSearch_TextChanged(sender As Object, e As EventArgs) Handles txt_ProductCategoriesSearch.TextChanged
        Module_Search.ProductCategories()
    End Sub
    Private Sub cmbbox_ProductCategoriesFilter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_ProductCategoriesFilter.TextChanged
        txt_ProductCategoriesSearch.Focus()
    End Sub
    Private Sub txt_ProductCategoriesSearch_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_ProductCategoriesSearch.KeyPress
        If Char.IsLetterOrDigit(e.KeyChar) Or Char.IsControl(e.KeyChar) Or Char.IsWhiteSpace(e.KeyChar) Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        If cmbbox_ProductCategoriesFilter.Text = "ID" Then
            txt_ProductCategoriesSearch.MaxLength = 1
        ElseIf cmbbox_ProductCategoriesFilter.Text = "CATEGORY NAME" Then
            txt_ProductCategoriesSearch.MaxLength = 21
        ElseIf cmbbox_ProductCategoriesFilter.Text = "DATE" Then
            txt_ProductCategoriesSearch.MaxLength = 10
        ElseIf cmbbox_ProductCategoriesFilter.Text = "TIME" Then
            txt_ProductCategoriesSearch.MaxLength = 11
        ElseIf cmbbox_ProductCategoriesFilter.Text = "NONE" Then
            txt_ProductCategoriesSearch.MaxLength = 10
        End If
    End Sub
    Private Sub cmbbox_ManageProductsFilter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_ManageProductsFilter.TextChanged
        txt_ManageProductsSearch.Focus()
    End Sub
    Private Sub txt_ManageProductsSearch_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_ManageProductsSearch.KeyPress
        If Char.IsLetterOrDigit(e.KeyChar) Or Char.IsControl(e.KeyChar) Or Char.IsWhiteSpace(e.KeyChar) Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        If cmbbox_ManageProductsFilter.Text = "PRODUCT ID" Then
            txt_ManageProductsSearch.MaxLength = 5
        ElseIf cmbbox_ManageProductsFilter.Text = "NAME" Then
            txt_ManageProductsSearch.MaxLength = 50
        ElseIf cmbbox_ManageProductsFilter.Text = "PRICE" Then
            txt_ManageProductsSearch.MaxLength = 9
        ElseIf cmbbox_ManageProductsFilter.Text = "PRODUCT CATEGORY" Then
            txt_ManageProductsSearch.MaxLength = 22
        ElseIf cmbbox_ManageProductsFilter.Text = "SUPPLIER" Then
            txt_ManageProductsSearch.MaxLength = 45
        ElseIf cmbbox_ManageProductsFilter.Text = "ACCOUNT NAME" Then
            txt_ManageProductsSearch.MaxLength = 50
        ElseIf cmbbox_ManageProductsFilter.Text = "DATE" Then
            txt_ManageProductsSearch.MaxLength = 10
        ElseIf cmbbox_ManageProductsFilter.Text = "TIME" Then
            txt_ManageProductsSearch.MaxLength = 11
        ElseIf cmbbox_ManageProductsFilter.Text = "NONE" Then
            txt_ManageProductsSearch.MaxLength = 10
        End If
    End Sub
    Private Sub txt_ManageProductsSearch_TextChanged(sender As Object, e As EventArgs) Handles txt_ManageProductsSearch.TextChanged
        Module_Search.ManageProducts()
    End Sub
    Private Sub dgv_In_CA_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv_In_CA.CellClick
        Module_Retrieve.Inventory_In_CA()
    End Sub
    Private Sub cmbbox_In_CA_Filter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_In_CA_Filter.TextChanged
        txt_In_CA_Search.Focus()
    End Sub
    Private Sub txt_In_CA_Search_TextChanged(sender As Object, e As EventArgs) Handles txt_In_CA_Search.TextChanged
        Module_Search.Inventory_In_CA()
    End Sub
    Private Sub txt_In_CA_Search_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_In_CA_Search.KeyPress
        If cmbbox_In_CA_Filter.Text = "PRODUCT NAME" Then
            txt_In_CA_Search.MaxLength = 50
        ElseIf cmbbox_In_CA_Filter.Text = "UNIT" Then
            txt_In_CA_Search.MaxLength = 4
        ElseIf cmbbox_In_CA_Filter.Text = "QUANTITY" Then
            txt_In_CA_Search.MaxLength = 6
        ElseIf cmbbox_In_CA_Filter.Text = "ACCOUNT NAME" Then
            txt_In_CA_Search.MaxLength = 50
        ElseIf cmbbox_In_CA_Filter.Text = "DATE" Then
            txt_In_CA_Search.MaxLength = 10
        ElseIf cmbbox_In_CA_Filter.Text = "TIME" Then
            txt_In_CA_Search.MaxLength = 11
        ElseIf cmbbox_In_CA_Filter.Text = "NONE" Then
            txt_In_CA_Search.MaxLength = 10
        End If
    End Sub
    Private Sub btn_In_CA_Refresh_Click(sender As Object, e As EventArgs) Handles btn_In_CA_Refresh.Click
        Module_Reset.Inventory_In_CA()
    End Sub
    Private Sub cmbbox_In_M_Filter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_In_M_Filter.TextChanged
        txt_In_M_Search.Focus()
    End Sub
    Private Sub txt_In_M_Search_TextChanged(sender As Object, e As EventArgs) Handles txt_In_M_Search.TextChanged
        Module_Search.Inventory_In_M()
    End Sub
    Private Sub txt_In_M_Search_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_In_M_Search.KeyPress
        If cmbbox_In_M_Filter.Text = "PRODUCT NAME" Then
            txt_In_M_Search.MaxLength = 50
        ElseIf cmbbox_In_M_Filter.Text = "UNIT" Then
            txt_In_M_Search.MaxLength = 4
        ElseIf cmbbox_In_M_Filter.Text = "QUANTITY" Then
            txt_In_M_Search.MaxLength = 6
        ElseIf cmbbox_In_M_Filter.Text = "ACCOUNT NAME" Then
            txt_In_M_Search.MaxLength = 50
        ElseIf cmbbox_In_M_Filter.Text = "DATE" Then
            txt_In_M_Search.MaxLength = 10
        ElseIf cmbbox_In_M_Filter.Text = "TIME" Then
            txt_In_M_Search.MaxLength = 11
        ElseIf cmbbox_In_M_Filter.Text = "NONE" Then
            txt_In_M_Search.MaxLength = 10
        End If
    End Sub
    Private Sub btn_In_M_Refresh_Click(sender As Object, e As EventArgs) Handles btn_In_M_Refresh.Click
        Module_Reset.Inventory_In_M()
    End Sub
    Private Sub btn_In_M_Add_Click(sender As Object, e As EventArgs) Handles btn_In_M_Add.Click
        Module_Add.Inventory_In_M()
    End Sub
    Private Sub btn_In_M_Edit_Click(sender As Object, e As EventArgs) Handles btn_In_M_Edit.Click
        Module_Edit.Inventory_In_M()
    End Sub
    Private Sub btn_In_M_Clear_Click(sender As Object, e As EventArgs) Handles btn_In_M_Clear.Click
        Module_Clear.Inventory_In_M()
    End Sub
    Private Sub btn_In_M_Update_Click(sender As Object, e As EventArgs) Handles btn_In_M_Update.Click
        Module_Update.Inventory_In_M()
    End Sub
    Private Sub btn_In_M_Delete_Click(sender As Object, e As EventArgs) Handles btn_In_M_Delete.Click
        Module_Delete.Inventory_In_M()
    End Sub
    Private Sub cmbbox_In_M_ProductName_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_In_M_ProductName.TextChanged
        If Not cmbbox_In_M_ProductName.Text = "" Then
            btn_In_M_Add.Enabled = True
            btn_In_M_Clear.Enabled = True
            cmbbox_In_M_Unit.Enabled = True
            txt_In_M_Quantity.Enabled = True
            cmbbox_In_M_Unit.Focus()
        Else
            btn_In_M_Add.Enabled = False
            btn_In_M_Clear.Enabled = False
            cmbbox_In_M_Unit.Enabled = False
            txt_In_M_Quantity.Enabled = False
        End If
    End Sub
    Private Sub tc_In_Content_Click(sender As Object, e As EventArgs) Handles tc_In_Content.Click
        Module_GetData.Inventory_In_CA()
        Module_GetData.Inventory_In_M()
        Module_GetData.Inventory_In_H()
    End Sub
    Private Sub dgv_Out_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv_Out.CellClick
        Module_Retrieve.Inventory_Out()
    End Sub
    Private Sub cmbbox_In_M_Unit_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_In_M_Unit.TextChanged
        If Not cmbbox_In_M_Unit.Text = "" Then
            txt_In_M_Quantity.Focus()
        End If
    End Sub
    Private Sub btn_In_H_Refresh_Click(sender As Object, e As EventArgs) Handles btn_In_H_Refresh.Click
        Module_Reset.Inventory_In_H()
    End Sub
    Private Sub cmbbox_In_H_Filter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_In_H_Filter.TextChanged
        txt_In_H_Search.Focus()
    End Sub
    Private Sub cmbbox_Out_Filter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_Out_Filter.TextChanged
        txt_Out_Search.Focus()
    End Sub
    Private Sub cmbbox_SalesFilter_TextChanged(sender As Object, e As EventArgs) Handles cmbbox_SalesFilter.TextChanged
        txt_SalesSearch.Focus()
    End Sub
    Private Sub txt_Out_Search_TextChanged(sender As Object, e As EventArgs) Handles txt_Out_Search.TextChanged
        Module_Search.Inventory_Out()
    End Sub
    Private Sub txt_In_H_Search_TextChanged(sender As Object, e As EventArgs) Handles txt_In_H_Search.TextChanged
        Module_Search.Inventory_In_H()
    End Sub
    Private Sub txt_SalesSearch_TextChanged(sender As Object, e As EventArgs) Handles txt_SalesSearch.TextChanged
        If txt_SalesSearch.Text = "" Then
            Module_GetData.Sales()
        Else
            Module_Search.Sales()
        End If
    End Sub
    Private Sub txt_In_H_Search_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_In_H_Search.KeyPress
        If cmbbox_In_H_Filter.Text = "PRODUCT NAME" Then
            txt_In_H_Search.MaxLength = 50
        ElseIf cmbbox_In_H_Filter.Text = "UNIT" Then
            txt_In_H_Search.MaxLength = 4
        ElseIf cmbbox_In_H_Filter.Text = "QUANTITY" Then
            txt_In_H_Search.MaxLength = 6
        ElseIf cmbbox_In_H_Filter.Text = "ACCOUNT NAME" Then
            txt_In_H_Search.MaxLength = 50
        ElseIf cmbbox_In_H_Filter.Text = "DATE" Then
            txt_In_H_Search.MaxLength = 10
        ElseIf cmbbox_In_H_Filter.Text = "TIME" Then
            txt_In_H_Search.MaxLength = 11
        ElseIf cmbbox_In_H_Filter.Text = "NONE" Then
            txt_In_H_Search.MaxLength = 10
        End If
    End Sub
    Private Sub txt_Out_Search_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txt_Out_Search.KeyPress
        If cmbbox_Out_Filter.Text = "PRODUCT NAME" Then
            txt_Out_Search.MaxLength = 50
        ElseIf cmbbox_Out_Filter.Text = "UNIT" Then
            txt_Out_Search.MaxLength = 4
        ElseIf cmbbox_Out_Filter.Text = "QUANTITY" Then
            txt_Out_Search.MaxLength = 6
        ElseIf cmbbox_Out_Filter.Text = "ACCOUNT NAME" Then
            txt_Out_Search.MaxLength = 50
        ElseIf cmbbox_Out_Filter.Text = "DATE" Then
            txt_Out_Search.MaxLength = 10
        ElseIf cmbbox_Out_Filter.Text = "TIME" Then
            txt_Out_Search.MaxLength = 11
        ElseIf cmbbox_Out_Filter.Text = "NONE" Then
            txt_Out_Search.MaxLength = 10
        End If
    End Sub
    Private Sub btnPrintPreview_Click(sender As Object, e As EventArgs) Handles btnPrintPreview.Click
        If Not dgv_Sales.RowCount < 1 Then
            TransferingInfo()
            Form_Print_Sales.ShowDialog()
        End If
    End Sub
    Private Sub TransferingInfo()
        Try
            Dim x As Integer = 0
            While x < dgv_Sales.Rows.Count
                With dgv_Sales.Rows(x)
                    If Not IsDBNull(.Cells(1).Value) Then
                        con.Close()
                        con.Open()
                        cmd = con.CreateCommand
                        cmd.CommandText = "INSERT INTO tbl_print_sales (Account_Name, Sub_Total, Date, Time, Total) values (@Account_Name, @Sub_Total, @Date, @Time, @Total);"
                        cmd.Parameters.Add(New MySqlParameter("@Account_Name", .Cells(1).Value.ToString))
                        cmd.Parameters.Add(New MySqlParameter("@Sub_Total", .Cells(2).Value))
                        cmd.Parameters.Add(New MySqlParameter("@Date", .Cells(3).Value))
                        cmd.Parameters.Add(New MySqlParameter("@Time", .Cells(4).Value.ToString))
                        cmd.Parameters.Add(New MySqlParameter("@Total", Module_GetData.getSalesValue))
                        cmd.ExecuteNonQuery()
                        cmd.Dispose()
                        con.Close()
                    End If
                End With
                con.Close()
                x = x + 1
            End While
        Catch ex As Exception
            MsgBox(ex.Message & vbCrLf & ex.StackTrace)
        End Try
        con.Close()
    End Sub
End Class